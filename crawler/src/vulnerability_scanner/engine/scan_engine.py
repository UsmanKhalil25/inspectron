import logging
import time
from typing import List

from dotenv import load_dotenv

from crawler.core import PageLoader
from vulnerability_scanner.schemas import Vulnerability
from vulnerability_scanner.scanners import (
    SecurityHeadersScanner,
    MixedContentScanner,
    CookieSecurityScanner,
)


class ScanEngine:
    def __init__(self, headless: bool = False, logger: logging.Logger = None):
        load_dotenv()

        self.logger = logger or logging.getLogger(__name__)
        self.page_loader = PageLoader(headless=headless)

        self.scanners = [
            SecurityHeadersScanner(),
            MixedContentScanner(),
            CookieSecurityScanner(),
        ]

        self._start_time: float | None = None
        self._end_time: float | None = None
        self._url_count: int = 0
        self._vulnerability_count: int = 0

    async def start(self) -> None:
        self.logger.info("Starting vulnerability scanner")
        self._start_time = time.perf_counter()
        await self.page_loader.start()

    async def scan(self, urls: List[str]) -> List[Vulnerability]:
        all_vulnerabilities = []

        for url in urls:
            self._url_count += 1
            self.logger.info("Scanning URL %d/%d: %s", self._url_count, len(urls), url)
            try:
                page = await self.page_loader.load(url)

                for scanner in self.scanners:
                    scanner_name = scanner.__class__.__name__
                    self.logger.debug("Running %s on %s", scanner_name, url)

                    try:
                        vulnerabilities = await scanner.scan(page, url)
                        all_vulnerabilities.extend(vulnerabilities)
                        self._vulnerability_count += len(vulnerabilities)
                    except Exception as e:
                        self.logger.exception(
                            "Error running %s on %s: %s", scanner_name, url, str(e)
                        )

            except Exception as e:
                self.logger.exception("Failed to load URL %s: %s", url, str(e))
                continue

        self.logger.info(
            "Scan complete. Found %d vulnerabilities across %d URLs",
            self._vulnerability_count,
            self._url_count,
        )

        return all_vulnerabilities

    async def close(self) -> None:
        self.logger.info("Shutting down vulnerability scanner")
        await self.page_loader.close()

        self._end_time = time.perf_counter()
        if self._start_time:
            elapsed = self._end_time - self._start_time
            self.logger.info("Vulnerability scanner ran for %.2f seconds", elapsed)

        self.logger.info(
            "Scanned %d URLs and found %d vulnerabilities",
            self._url_count,
            self._vulnerability_count,
        )
