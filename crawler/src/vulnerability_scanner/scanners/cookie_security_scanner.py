import logging
from typing import List
from playwright.async_api import Page

from vulnerability_scanner.schemas import Vulnerability
from vulnerability_scanner.types import VulnerabilitySeverity


class CookieSecurityScanner:

    def __init__(self):
        self.logger = logging.getLogger(__name__)

    async def scan(self, page: Page, url: str) -> List[Vulnerability]:
        vulnerabilities = []

        try:
            cookies = await page.context.cookies()

            if not cookies:
                return vulnerabilities

            insecure_cookies = []
            for cookie in cookies:
                issues = []

                if not cookie.get("secure", False) and url.startswith("https://"):
                    issues.append("missing Secure flag")

                if not cookie.get("httpOnly", False):
                    issues.append("missing HttpOnly flag")

                same_site = cookie.get("sameSite", "None")
                if same_site == "None" or not same_site:
                    issues.append("missing or weak SameSite attribute")

                if issues:
                    insecure_cookies.append(
                        {
                            "name": cookie.get("name", "unknown"),
                            "issues": issues,
                        }
                    )

            if insecure_cookies:
                cookie_details = "\n".join(
                    f"  - {cookie['name']}: {', '.join(cookie['issues'])}"
                    for cookie in insecure_cookies[:10]
                )
                if len(insecure_cookies) > 10:
                    cookie_details += f"\n  ... and {len(insecure_cookies) - 10} more"

                vulnerability = Vulnerability(
                    url=url,
                    scanner="CookieSecurityScanner",
                    severity=VulnerabilitySeverity.MEDIUM,
                    title=f"Insecure cookie configuration: {len(insecure_cookies)} cookie(s) with security issues",
                    description=f"Found {len(insecure_cookies)} cookie(s) with security configuration issues:\n{cookie_details}",
                    recommendation=(
                        "Set the Secure flag on cookies transmitted over HTTPS, "
                        "set HttpOnly flag to prevent JavaScript access, "
                        "and use SameSite=Strict or SameSite=Lax to prevent CSRF attacks."
                    ),
                )
                vulnerabilities.append(vulnerability)
                self.logger.info("Found vulnerability: %s", vulnerability)

        except Exception as e:
            self.logger.exception("Error scanning cookies for %s: %s", url, str(e))

        return vulnerabilities
