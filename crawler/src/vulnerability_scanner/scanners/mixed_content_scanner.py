import logging
from typing import List
from playwright.async_api import Page

from vulnerability_scanner.schemas import Vulnerability
from vulnerability_scanner.types import VulnerabilitySeverity


class MixedContentScanner:
    """Scanner to detect HTTP resources loaded on HTTPS pages (mixed content)."""

    def __init__(self):
        self.logger = logging.getLogger(__name__)

    async def scan(self, page: Page, url: str) -> List[Vulnerability]:
        """Scan a page for mixed content issues."""
        vulnerabilities = []

        try:
            if not url.startswith("https://"):
                return vulnerabilities

            http_resources = await self._find_http_resources(page)

            if http_resources:
                resource_list = "\n".join(
                    f"  - {resource}" for resource in http_resources[:10]
                )
                if len(http_resources) > 10:
                    resource_list += f"\n  ... and {len(http_resources) - 10} more"

                vulnerability = Vulnerability(
                    url=url,
                    scanner="MixedContentScanner",
                    severity=VulnerabilitySeverity.HIGH,
                    title=f"Mixed content detected: {len(http_resources)} HTTP resource(s) on HTTPS page",
                    description=f"The HTTPS page loads {len(http_resources)} resource(s) over insecure HTTP, which can be intercepted or modified by attackers. Resources found:\n{resource_list}",
                    recommendation="Update all resource URLs to use HTTPS instead of HTTP.",
                )
                vulnerabilities.append(vulnerability)
                self.logger.info("Found vulnerability: %s", vulnerability)

        except Exception as e:
            self.logger.exception(
                "Error scanning for mixed content on %s: %s", url, str(e)
            )

        return vulnerabilities

    async def _find_http_resources(self, page: Page) -> List[str]:
        """Find all HTTP resources on the page."""
        try:
            http_resources = await page.evaluate(
                """
                () => {
                    const resources = new Set();
                    
                    // Check src attributes (scripts, images, iframes, etc.)
                    document.querySelectorAll('[src]').forEach(el => {
                        const src = el.getAttribute('src');
                        if (src && src.startsWith('http://')) {
                            resources.add(src);
                        }
                    });
                    
                    // Check href attributes (stylesheets, links)
                    document.querySelectorAll('link[href]').forEach(el => {
                        const href = el.getAttribute('href');
                        if (href && href.startsWith('http://')) {
                            resources.add(href);
                        }
                    });
                    
                    // Check inline styles for url() references
                    document.querySelectorAll('[style]').forEach(el => {
                        const style = el.getAttribute('style');
                        if (style) {
                            const urlMatches = style.match(/url\\(['"]?http:\\/\\/[^'"\\)]+['"]?\\)/g);
                            if (urlMatches) {
                                urlMatches.forEach(match => {
                                    const url = match.match(/http:\\/\\/[^'"\\)]+/)?.[0];
                                    if (url) resources.add(url);
                                });
                            }
                        }
                    });
                    
                    return Array.from(resources);
                }
            """
            )

            return http_resources

        except Exception as e:
            self.logger.exception("Error finding HTTP resources: %s", str(e))
            return []
