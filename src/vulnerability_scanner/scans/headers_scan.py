from typing import List

import requests

from .base_scan import BaseScan
from ..enums import Severity, VulnerabilityType
from ..models.vulnerability import Vulnerability


class HeadersScan(BaseScan):
    REQUIRED_HEADERS = {
        "Content-Security-Policy": (
            Severity.HIGH,
            "Missing Content-Security-Policy header increases risk of XSS.",
        ),
        "X-Frame-Options": (
            Severity.MEDIUM,
            "Missing X-Frame-Options allows clickjacking via iframes.",
        ),
        "X-Content-Type-Options": (
            Severity.MEDIUM,
            "Missing X-Content-Type-Options may allow MIME type sniffing.",
        ),
        "Referrer-Policy": (
            Severity.LOW,
            "Missing Referrer-Policy may leak sensitive referrer data.",
        ),
        "Strict-Transport-Security": (
            Severity.HIGH,
            "Missing HSTS weakens protection against protocol downgrade attacks.",
        ),
        "Permissions-Policy": (
            Severity.LOW,
            "Missing Permissions-Policy may allow unnecessary powerful features.",
        ),
    }

    def run(self) -> List[Vulnerability]:
        vulnerabilities: List[Vulnerability] = []

        try:
            response = requests.head(self.url, allow_redirects=True, timeout=10)
            headers = {k.lower(): v for k, v in response.headers.items()}
        except requests.RequestException as exc:
            return [
                Vulnerability(
                    type=VulnerabilityType.SECURITY_HEADERS,
                    severity=Severity.MEDIUM,
                    title="Unable to verify security headers",
                    description=f"HEAD request failed: {exc}",
                    url=self.url,
                )
            ]

        for header_name, (severity, desc) in self.REQUIRED_HEADERS.items():
            if header_name.lower() not in headers:
                vulnerabilities.append(
                    Vulnerability(
                        type=VulnerabilityType.SECURITY_HEADERS,
                        severity=severity,
                        title=f"Missing security header: {header_name}",
                        description=desc,
                        url=self.url,
                    )
                )

        return vulnerabilities
